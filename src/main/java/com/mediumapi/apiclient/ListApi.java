/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mediumapi.apiclient;

import com.mediumapi.client.ListApiClient;
import com.mediumapi.domain.list.MediumList;
import com.mediumapi.domain.list.MediumListArticles;
import com.mediumapi.domain.list.MediumListResponses;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

public interface ListApi {

  default ListApiClient getDelegate() {
    return new ListApiClient() {
    };
  }

  /**
   * GET /list/{list_id}/articles : Get List Articles Returns an array of
   * &#x60;articles_ids&#x60; present in the given Medium List.
   *
   * @param listId
   *            It&#39;s a unique hash id assigned to every Medium List.
   *            (required)
   * @return OK (status code 200)
   */
  @Operation(operationId = "listListIdArticlesGet", summary = "Get List Articles", description = "Returns an array of `articles_ids` present in the given Medium List. ", tags = {
      "List"}, responses = {@ApiResponse(responseCode = "200", description = "OK", content = {
          @Content(mediaType = "application/json", schema = @Schema(implementation = MediumListArticles.class))})})
  @RequestMapping(method = RequestMethod.GET, value = "/list/{list_id}/articles", produces = {"application/json"})

  default ResponseEntity<MediumListArticles> listListIdArticlesGet(
      @Parameter(name = "list_id", description = "It's a unique hash id assigned to every Medium List.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId) {
    return getDelegate().listListIdArticlesGet(listId);
  }

  /**
   * GET /list/{list_id} : Get List Info Returns the list-related information such
   * as *id, name, author, description, thumbnail image url, creation datetime,
   * last article inserted datetime, number of articles in the list, claps,
   * voters, and comments/responses*.
   *
   * @param listId
   *            It&#39;s a unique hash id assigned to every Medium List.
   *            (required)
   * @return OK (status code 200)
   */
  @Operation(operationId = "listListIdGet", summary = "Get List Info", description = "Returns the list-related information such as *id, name, author, description,  thumbnail image url, creation datetime, last article inserted datetime,  number of articles in the list, claps, voters, and comments/responses*. ", tags = {
      "List"}, responses = {@ApiResponse(responseCode = "200", description = "OK", content = {
          @Content(mediaType = "application/json", schema = @Schema(implementation = MediumList.class))})})
  @RequestMapping(method = RequestMethod.GET, value = "/list/{list_id}", produces = {"application/json"})

  default ResponseEntity<MediumList> listListIdGet(
      @Parameter(name = "list_id", description = "It's a unique hash id assigned to every Medium List.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId) {
    return getDelegate().listListIdGet(listId);
  }

  /**
   * GET /list/{list_id}/responses : Get List Responses Returns an array of
   * &#x60;response_ids&#x60; of the comments (same as &#x60;article_ids&#x60;) on
   * the given Medium List.
   *
   * @param listId
   *            It&#39;s a unique hash id assigned to every Medium List.
   *            (required)
   * @return OK (status code 200)
   */
  @Operation(operationId = "listListIdResponsesGet", summary = "Get List Responses", description = "Returns an array of `response_ids` of the comments (same as `article_ids`) on the given Medium List. ", tags = {
      "List"}, responses = {@ApiResponse(responseCode = "200", description = "OK", content = {
          @Content(mediaType = "application/json", schema = @Schema(implementation = MediumListResponses.class))})})
  @RequestMapping(method = RequestMethod.GET, value = "/list/{list_id}/responses", produces = {"application/json"})

  default ResponseEntity<MediumListResponses> listListIdResponsesGet(
      @Parameter(name = "list_id", description = "It's a unique hash id assigned to every Medium List.", required = true, in = ParameterIn.PATH) @PathVariable("list_id") String listId) {
    return getDelegate().listListIdResponsesGet(listId);
  }

}
